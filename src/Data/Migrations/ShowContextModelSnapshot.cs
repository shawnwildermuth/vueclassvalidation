// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using VueClassValidation.Data;

namespace VueClassValidation.Migrations
{
    [DbContext(typeof(ShowContext))]
    partial class ShowContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("VueClassValidation.Data.Entities.Act", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(4000)")
                        .HasMaxLength(4000);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("Acts","TicketScalper");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Flute Tour",
                            Name = "Jethro Tull"
                        },
                        new
                        {
                            Id = 2,
                            Description = "The Boss Across the World",
                            Name = "Bruce Springsteen"
                        },
                        new
                        {
                            Id = 3,
                            Description = "We're Still Alive Tour",
                            Name = "Styx"
                        });
                });

            modelBuilder.Entity("VueClassValidation.Data.Entities.ActShow", b =>
                {
                    b.Property<int>("ActId")
                        .HasColumnType("int");

                    b.Property<int>("ShowId")
                        .HasColumnType("int");

                    b.HasKey("ActId", "ShowId");

                    b.HasIndex("ShowId");

                    b.ToTable("ActShows","TicketScalper");

                    b.HasData(
                        new
                        {
                            ActId = 1,
                            ShowId = 1
                        },
                        new
                        {
                            ActId = 3,
                            ShowId = 1
                        },
                        new
                        {
                            ActId = 2,
                            ShowId = 2
                        },
                        new
                        {
                            ActId = 2,
                            ShowId = 3
                        });
                });

            modelBuilder.Entity("VueClassValidation.Data.Entities.Show", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsGeneralAdmission")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<int>("Length")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("VenueId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("VenueId");

                    b.ToTable("Shows","TicketScalper");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            IsGeneralAdmission = true,
                            Length = 1,
                            Name = "Jethro Tull and Styx",
                            StartDate = new DateTime(2020, 11, 1, 4, 0, 0, 0, DateTimeKind.Utc),
                            VenueId = 2
                        },
                        new
                        {
                            Id = 2,
                            IsGeneralAdmission = false,
                            Length = 1,
                            Name = "Bruce!",
                            StartDate = new DateTime(2020, 11, 4, 5, 0, 0, 0, DateTimeKind.Utc),
                            VenueId = 1
                        },
                        new
                        {
                            Id = 3,
                            IsGeneralAdmission = false,
                            Length = 1,
                            Name = "Bruce!",
                            StartDate = new DateTime(2020, 11, 3, 5, 0, 0, 0, DateTimeKind.Utc),
                            VenueId = 1
                        });
                });

            modelBuilder.Entity("VueClassValidation.Data.Entities.Ticket", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("CurrentPrice")
                        .HasColumnType("decimal(9,2)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("OriginalPrice")
                        .HasColumnType("decimal(9,2)");

                    b.Property<string>("Seat")
                        .HasColumnType("nvarchar(20)")
                        .HasMaxLength(20);

                    b.Property<int>("ShowId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ShowId");

                    b.ToTable("Tickets","TicketScalper");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CurrentPrice = 99.99m,
                            Date = new DateTime(2020, 11, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            OriginalPrice = 49.99m,
                            Seat = "General Admission",
                            ShowId = 1
                        },
                        new
                        {
                            Id = 2,
                            CurrentPrice = 99.99m,
                            Date = new DateTime(2020, 11, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            OriginalPrice = 49.99m,
                            Seat = "General Admission",
                            ShowId = 1
                        },
                        new
                        {
                            Id = 3,
                            CurrentPrice = 99.99m,
                            Date = new DateTime(2020, 11, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            OriginalPrice = 49.99m,
                            Seat = "General Admission",
                            ShowId = 1
                        },
                        new
                        {
                            Id = 4,
                            CurrentPrice = 99.99m,
                            Date = new DateTime(2020, 11, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            OriginalPrice = 49.99m,
                            Seat = "General Admission",
                            ShowId = 1
                        },
                        new
                        {
                            Id = 5,
                            CurrentPrice = 99.99m,
                            Date = new DateTime(2020, 11, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            OriginalPrice = 49.99m,
                            Seat = "General Admission",
                            ShowId = 1
                        },
                        new
                        {
                            Id = 6,
                            CurrentPrice = 99.99m,
                            Date = new DateTime(2020, 11, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            OriginalPrice = 49.99m,
                            Seat = "General Admission",
                            ShowId = 1
                        },
                        new
                        {
                            Id = 7,
                            CurrentPrice = 99.99m,
                            Date = new DateTime(2020, 11, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            OriginalPrice = 49.99m,
                            Seat = "General Admission",
                            ShowId = 1
                        },
                        new
                        {
                            Id = 8,
                            CurrentPrice = 99.99m,
                            Date = new DateTime(2020, 11, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            OriginalPrice = 49.99m,
                            Seat = "General Admission",
                            ShowId = 1
                        },
                        new
                        {
                            Id = 9,
                            CurrentPrice = 299.99m,
                            Date = new DateTime(2020, 11, 4, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            OriginalPrice = 129m,
                            Seat = "F11",
                            ShowId = 2
                        },
                        new
                        {
                            Id = 10,
                            CurrentPrice = 299.99m,
                            Date = new DateTime(2020, 11, 4, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            OriginalPrice = 129m,
                            Seat = "F12",
                            ShowId = 2
                        },
                        new
                        {
                            Id = 11,
                            CurrentPrice = 299.99m,
                            Date = new DateTime(2020, 11, 4, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            OriginalPrice = 129m,
                            Seat = "F13",
                            ShowId = 2
                        },
                        new
                        {
                            Id = 12,
                            CurrentPrice = 299.99m,
                            Date = new DateTime(2020, 11, 4, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            OriginalPrice = 129m,
                            Seat = "F14",
                            ShowId = 2
                        },
                        new
                        {
                            Id = 13,
                            CurrentPrice = 299.99m,
                            Date = new DateTime(2020, 11, 4, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            OriginalPrice = 129m,
                            Seat = "G01",
                            ShowId = 2
                        },
                        new
                        {
                            Id = 14,
                            CurrentPrice = 299.99m,
                            Date = new DateTime(2020, 11, 4, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            OriginalPrice = 129m,
                            Seat = "G02",
                            ShowId = 2
                        },
                        new
                        {
                            Id = 15,
                            CurrentPrice = 299.99m,
                            Date = new DateTime(2020, 11, 4, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            OriginalPrice = 129m,
                            Seat = "G03",
                            ShowId = 2
                        },
                        new
                        {
                            Id = 16,
                            CurrentPrice = 299.99m,
                            Date = new DateTime(2020, 11, 4, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            OriginalPrice = 129m,
                            Seat = "G04",
                            ShowId = 2
                        });
                });

            modelBuilder.Entity("VueClassValidation.Data.Entities.Venue", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(20)")
                        .HasMaxLength(20);

                    b.HasKey("Id");

                    b.ToTable("Venues","TicketScalper");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "The Omni",
                            Phone = "(404) 555-1212"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Variety Playhouse",
                            Phone = "(404) 555-1213"
                        });
                });

            modelBuilder.Entity("VueClassValidation.Data.Entities.ActShow", b =>
                {
                    b.HasOne("VueClassValidation.Data.Entities.Act", "Act")
                        .WithMany("ActShows")
                        .HasForeignKey("ActId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VueClassValidation.Data.Entities.Show", "Show")
                        .WithMany("ActShows")
                        .HasForeignKey("ShowId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("VueClassValidation.Data.Entities.Show", b =>
                {
                    b.HasOne("VueClassValidation.Data.Entities.Venue", "Venue")
                        .WithMany("Shows")
                        .HasForeignKey("VenueId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("VueClassValidation.Data.Entities.Ticket", b =>
                {
                    b.HasOne("VueClassValidation.Data.Entities.Show", "Show")
                        .WithMany("Tickets")
                        .HasForeignKey("ShowId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("VueClassValidation.Data.Entities.Venue", b =>
                {
                    b.OwnsOne("VueClassValidation.Data.Entities.Address", "Address", b1 =>
                        {
                            b1.Property<int>("VenueId")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int")
                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                            b1.Property<string>("Address1")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("nvarchar(100)")
                                .HasMaxLength(100)
                                .HasDefaultValue("");

                            b1.Property<string>("Address2")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("nvarchar(100)")
                                .HasMaxLength(100)
                                .HasDefaultValue("");

                            b1.Property<string>("Address3")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("nvarchar(100)")
                                .HasMaxLength(100)
                                .HasDefaultValue("");

                            b1.Property<string>("CityTown")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("nvarchar(50)")
                                .HasMaxLength(50)
                                .HasDefaultValue("");

                            b1.Property<string>("Country")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("nvarchar(50)")
                                .HasMaxLength(50)
                                .HasDefaultValue("");

                            b1.Property<string>("PostalCode")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("nvarchar(50)")
                                .HasMaxLength(50)
                                .HasDefaultValue("");

                            b1.Property<string>("StateProvince")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("nvarchar(50)")
                                .HasMaxLength(50)
                                .HasDefaultValue("");

                            b1.HasKey("VenueId");

                            b1.ToTable("Venues");

                            b1.WithOwner()
                                .HasForeignKey("VenueId");

                            b1.HasData(
                                new
                                {
                                    VenueId = 1,
                                    Address1 = "123 Peachtree St",
                                    CityTown = "Atlanta",
                                    Country = "USA",
                                    PostalCode = "30303",
                                    StateProvince = "GA"
                                },
                                new
                                {
                                    VenueId = 2,
                                    Address1 = "123 Euclid Avenue",
                                    CityTown = "Atlanta",
                                    Country = "USA",
                                    PostalCode = "30307",
                                    StateProvince = "GA"
                                });
                        });
                });
#pragma warning restore 612, 618
        }
    }
}
